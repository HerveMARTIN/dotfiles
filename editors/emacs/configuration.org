#+TITLE: Emacs Configuration
#+AUTHOR: Hervé MARTIN
#+EMAIL: herve.martin@gmail.com
#+OPTIONS: toc:nil num:nil

* Configure =use-package=

I use =use-package= to install and configure my packages. My =init.el= includes
the initial setup for =package.el= and ensures that =use-package= is installed,
since I wanna do that right away.

This makes sure that =use-package= will install the package if it's not already
available. It also means that I should be able to open Emacs for the first time
on a fresh Debian box and have my whole environment automatically installed. I'm
not /totally/ sure about that, but we're gettin' close.

#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

Always compile packages, and use the newest version available.

#+begin_src emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+end_src

* Set personal information

** Who am I? Where am I?

#+begin_src emacs-lisp
  (setq user-full-name "Hervé MARTIN"
    user-mail-address "herve.martin@gmail.com"
    calendar-latitude 47.567
    calendar-longitude -1.615
    calendar-location-name "Nozay, 44, France")
#+end_src

* Lang

#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
#+end_src

* Custom settings go elsewhere

#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+end_src

* UI preferences
** Tweak window chrome

I don't usually use the menu or scroll bar, and they take up useful space.

#+begin_src emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode -1)
#+end_src

Show line numbers and date

#+begin_src emacs-lisp
  (column-number-mode t)
  (display-time-mode t)
#+end_src

Disable ring bell

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

The default frame title isn't useful. This binds it to the name of the current
project:

#+begin_src emacs-lisp
  (setq frame-title-format '((:eval (projectile-project-name))))
#+end_src

** Highlight the current line

=global-hl-line-mode= softly highlights the background color of the line
containing point. It makes it a bit easier to find point, and it's useful when
pairing or presenting code.

#+begin_src emacs-lisp
  (global-hl-line-mode)
#+end_src

** Highlight uncommitted changes

Use the =diff-hl= package to highlight changed-and-uncommitted lines when
programming.

#+begin_src emacs-lisp
  (use-package diff-hl
    :config
    (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
    (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
#+end_src

** Theme one-dark

#+begin_src emacs-lisp
  (use-package one-themes
    :init
    (load-theme 'one-dark t)
  )
#+end_src

* =evil-mode=

** Before everything, disable evil keybindings because we're using evil-collection

#+begin_src emacs-lisp
(setq evil-want-keybinding nil)
(setq evil-want-C-i-jump nil)
#+end_src

** Use =leader= for evil
Before loading evil

#+begin_src emacs-lisp
(use-package evil-leader
  :ensure t
  :config
  (global-evil-leader-mode 1)
)
(evil-leader/set-leader ",")
#+end_src

See key bindings paragraph

** Evil core
#+begin_src emacs-lisp
(use-package evil
  :ensure t ;; install the evil package if not installed
  :init ;; tweak evil's configuration before loading it
  (setq evil-search-module 'evil-search)
  (setq evil-ex-complete-emacs-commands nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (setq evil-shift-round nil)
  (setq evil-want-C-u-scroll t)
  :config ;; tweak evil after loading it
  (evil-mode 1); Enable evil mode
)
#+end_src

Install =evil-collection=, which provides evil-friendly bindings for many modes.

#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init)
)
#+end_src

Enable =surround= everywhere.

#+begin_src emacs-lisp
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1)
)
#+end_src


Use =evil= with Org agendas.

#+begin_src emacs-lisp
  (use-package evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
      (lambda () (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

* Project management

I use a few packages in virtually every programming or writing environment to
manage the project, handle auto-completion, search for terms, and deal with
version control. That's all in here.

** =ripgrep=

Install and configure [[https://github.com/Wilfred/deadgrep][deadgrep]] as an interface to =ripgrep=. I prefer =evil=
bindings.

#+begin_src emacs-lisp
  (use-package deadgrep
    :config (evil-collection-deadgrep-setup))
#+end_src

** =company=

Use =company-mode= everywhere.

#+begin_src emacs-lisp
  (use-package company)
  (add-hook 'after-init-hook 'global-company-mode)
#+end_src

Use =M-/= for completion.

#+begin_src emacs-lisp
  (global-set-key (kbd "M-/") 'company-complete-common)
#+end_src

** =dumb-jump=

The =dumb-jump= package works well enough in a [[https://github.com/jacktasia/dumb-jump#supported-languages][ton of environments]], and it
doesn't require any additional setup. I've bound its most useful command to
=M-.=.

#+begin_src emacs-lisp
  (use-package dumb-jump
    :config
    (define-key evil-normal-state-map (kbd "M-.") 'dumb-jump-go)
    (setq dumb-jump-selector 'ivy))
#+end_src

** =flycheck=

 #+begin_src emacs-lisp
   (use-package let-alist)
   (use-package flycheck)
 #+end_src

** =magit=

I use =magit= to handle version control. It's lovely, but I tweak a few things:

- I bring up the status menu with =C-x g=.
- Use =evil= keybindings with =magit=.
- The default behavior of =magit= is to ask before pushing. I haven't had any
  problems with accidentally pushing, so I'd rather not confirm that every time.
- Per [[http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html][tpope's suggestions]], highlight commit text in the summary line that goes
  beyond 50 characters.
- On the command line I'll generally push a new branch with a plain old =git
  push=, which automatically creates a tracking branch on (usually) =origin=.
  Magit, by default, wants me to manually specify an upstream branch. This binds
  =P P= to =magit-push-implicitly=, which is just a wrapper around =git push
  -v=. Convenient!
- I'd like to start in the insert state when writing a commit message.

#+begin_src emacs-lisp
  (use-package magit
    :bind
    ("C-x g" . magit-status)

    :config
    (use-package evil-magit)
    (use-package with-editor)
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)

    (with-eval-after-load 'magit-remote
      (magit-define-popup-action 'magit-push-popup ?P
        'magit-push-implicitly--desc
        'magit-push-implicitly ?p t))

    (add-hook 'with-editor-mode-hook 'evil-insert-state))
#+end_src

=git-timemachine=, which lets you quickly page through the
history of a file.

#+begin_src emacs-lisp
  (use-package git-timemachine)
#+end_src

** =projectile=

Projectile's default binding of =projectile-ag= to =C-c p s s= is clunky enough
that I rarely use it (and forget it when I need it). This binds it to the
easier-to-type =C-c v= to useful searches.

Bind =C-p= to fuzzy-finding files in the current project. We also need to
explicitly set that in a few other modes.

I use =ivy= as my completion system.

When I visit a project with =projectile-switch-project=, the default action is
to search for a file in that project. I'd rather just open up the top-level
directory of the project in =dired= and find (or create) new files from there.

I'd like to /always/ be able to recursively fuzzy-search for files, not just
when I'm in a Projectile-defined project. I use the current directory as a
project root (if I'm not in a "real" project).

#+begin_src emacs-lisp
  (use-package projectile
    :bind
    ("C-c v" . deadgrep)

    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

    (define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)
    (evil-define-key 'motion ag-mode-map (kbd "C-p") 'projectile-find-file)
    (evil-define-key 'motion rspec-mode-map (kbd "C-p") 'projectile-find-file)

    (setq projectile-completion-system 'ivy)
    (setq projectile-switch-project-action 'projectile-dired)
    (setq projectile-require-project-root nil)
    (setq projectile-project-search-path '("~/Documents/workspace"))
    (projectile-discover-projects-in-search-path)
  )
#+end_src

** Configure =ivy= and =counsel=

I use =ivy= and =counsel= as my completion framework.

This configuration:

- Uses =counsel-M-x= for command completion,
- Replaces =isearch= with =swiper=,
- Uses =smex= to maintain history,
- Enables fuzzy matching everywhere except swiper (where it's thoroughly
  unhelpful), and
- Includes recent files in the switch buffer.

#+begin_src emacs-lisp
  (use-package counsel
    :bind
    ("M-x" . 'counsel-M-x)
    ("C-s" . 'swiper)

    :config
    (use-package flx)
    (use-package smex)

    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-re-builders-alist
      '((swiper . ivy--regex-plus)
        (t . ivy--regex-fuzzy))))
#+end_src

** Use Helm Projectile

Install Helm first

#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :config
  (helm-mode 1)
  (setq helm-autoresize-mode t)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
)
#+end_src

#+begin_src emacs-lisp
  (use-package helm-projectile
    :bind (("C-S-P" . helm-projectile-switch-project))
    :ensure t
  )
#+end_src

Helm find file is slow, doing it with fzf

#+begin_src emacs-lisp
(use-package fzf
    :ensure t
    :bind (("C-x f" . fzf-git))
)
#+end_src

* Engine mode
#+begin_src emacs-lisp
(use-package engine-mode
  :config
  (engine-mode t)
)
(defengine duckduckgo
  "https://duckduckgo.com/?q=%s"
  :keybinding "d")
(defengine google
  "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
  :keybinding "g")
#+end_src

* Key bindings
** Evil Leader key bindings
#+begin_src emacs-lisp
(evil-leader/set-key "bs" 'helm-projectile-switch-to-buffer)
(evil-leader/set-key "bc" 'kill-this-buffer)
(evil-leader/set-key "ec" (lambda() (interactive)(find-file "~/.emacs.d/configuration.org")))
(evil-leader/set-key "ed" (lambda() (interactive)(find-file "Dockerfile")))
(evil-leader/set-key "eg" (lambda() (interactive)(find-file "Gemfile")))
(evil-leader/set-key "ei" (lambda() (interactive)(find-file "~/.emacs.d/init.el")))
(evil-leader/set-key "ej" (lambda() (interactive)(find-file "Jenkinsfile")))
(evil-leader/set-key "ep" (lambda() (interactive)(find-file "Puppetfile")))
(evil-leader/set-key "er" (lambda() (interactive)(find-file "Rakefile")))
(evil-leader/set-key "f" 'fzf-git)
(evil-leader/set-key "gpl" 'magit-pull-from-upstream)
(evil-leader/set-key "gps" 'magit-push-current-to-upstream)
(evil-leader/set-key "p" 'helm-projectile-switch-project)
(evil-leader/set-key "sc" 'org-babel-load-file "~/.emacs.d/configuration.org")
(evil-leader/set-key "si" 'load-file "~/.emacs.d/init.el")
#+end_src
