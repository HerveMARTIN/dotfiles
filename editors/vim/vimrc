set shell=/bin/bash
set nocompatible              " be iMproved, required

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
" For plugins details go to https://vimawesome.com/
" Appearance
"Plug 'KeitaNakamura/neodark.vim'
Plug 'joshdick/onedark.vim'
Plug 'ryanoasis/vim-devicons'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'vim-airline/vim-airline'
Plug 'etdev/vim-hexcolor'
"Plug 'edkolev/tmuxline.vim'
" Helpers
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'mileszs/ack.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'godlygeek/tabular'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'easymotion/vim-easymotion'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'jceb/vim-orgmode'
" Git tools
Plug 'Xuyuanp/nerdtree-git-plugin' , { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }
Plug 'tpope/vim-fugitive'
Plug 'zivyangll/git-blame.vim'
Plug 'airblade/vim-gitgutter'
Plug 'sjl/splice.vim'
" Language specific
"Plug 'sheerun/vim-polyglot'
Plug 'w0rp/ale'
Plug 'rodjek/vim-puppet'
Plug 'jamessan/vim-gnupg', { 'for': 'gpg' }
Plug 'dag/vim-fish', { 'for': 'fish' }
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }
Plug 'davidhalter/jedi-vim', { 'for': 'python' }
Plug 'mustache/vim-mustache-handlebars'
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  Plug 'fatih/vim-go'
endif
call plug#end()

" For any plugins that use this, make their keymappings use comma
let mapleader = ","
let maplocalleader = ";"

colorscheme onedark
"colorscheme neodark

set tabstop=2 shiftwidth=2 softtabstop=2 expandtab
au BufNewFile,BufRead Jenkinsfile set filetype=groovy
autocmd Filetype groovy setlocal ts=4 sw=4 sts=4 expandtab

" Make it easier to work with buffers
" http://vim.wikia.com/wiki/Easier_buffer_switching
set hidden
set confirm
set autowriteall
set wildmenu wildmode=full
set backspace=2

" Autoread files when changed
set autoread

" Display unprintable characters f12 - switches
set list
" Unprintable chars mapping
set listchars=tab:•\ ,trail:•,extends:»,precedes:«
" Shortcut to toggle unprintable characters
nnoremap <silent> <leader>si :set invlist<CR>

" Omni completion
filetype plugin on
set omnifunc=syntaxcomplete#Complete

" Backup, swap, undo 
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//

" Create temporary folders if they don't already exist
if !isdirectory( expand( &undodir ) )
  call mkdir( expand( &undodir ), "p" )
endif
if !isdirectory( expand( &backupdir ) )
  call mkdir( expand( &backupdir ), "p" )
endif
if !isdirectory( expand( &directory ) )
  call mkdir( expand( &directory ), "p" )
endif

set ignorecase
set smartcase

set clipboard=unnamed

" Stop using arrow keys
nnoremap <Left> :echo "Use h"<CR>
nnoremap <Right> :echo "Use l"<CR>
nnoremap <Up> :echo "Use k"<CR>
nnoremap <Down> :echo "Use j"<CR>
vnoremap <Left> :echo "Use h"<CR>
vnoremap <Right> :echo "Use l"<CR>
vnoremap <Up> :echo "Use k"<CR>
vnoremap <Down> :echo "Use j"<CR>

" Shortcut to edit THIS configuration file: (e)dit (c)onfiguration
nnoremap <silent> <leader>ec :e $MYVIMRC<CR>

" Shortcut to source (reload) THIS configuration file after editing it: (s)ource (c)onfiguraiton
nnoremap <leader>sc :source $MYVIMRC<CR>

" Shortcuts to launch PlugInstall and PlugClean
nnoremap <silent> <leader>pi :PlugInstall<CR>
nnoremap <silent> <leader>pc :PlugClean<CR>

" Toggle line numbers
set number
set relativenumber
nnoremap <silent> <leader>nl :setlocal number!<CR>
nnoremap <silent> <leader>nr :setlocal relativenumber!<CR>

" Edit Puppetfile/Jenkinsfile
nnoremap <silent> <leader>ep :e Puppetfile<CR>
nnoremap <silent> <leader>ej :e Jenkinsfile<CR>
nnoremap <silent> <leader>er :e Rakefile<CR>
nnoremap <silent> <leader>ed :e Dockerfile<CR>
nnoremap <silent> <leader>eg :e Gemfile<CR>

" Buffer management
nnoremap <C-l> :bn<CR>
nnoremap <C-h> :bp<CR>
nnoremap <C-m> :b#<CR>
nnoremap <silent> <leader>bd :bd<CR>
nnoremap <silent> <leader>bc :%bd<CR><C-O>:bd#<CR><CR>

" Registers
nnoremap <leader>r :register<CR>

" Align blocks of text and keep them selected
vmap < <gv
vmap > >gv

" Quick yank/paste from/to system register
nnoremap <leader>d "_dd
vnoremap <leader>d "_D
nnoremap <leader>y "+y
vnoremap <leader>y "+y
nnoremap <leader>p "+p
vnoremap <leader>p "+p
vnoremap <c-/> :TComment<cr>

" Paste in new line
:nnoremap P :pu<CR>

" Speed moves
noremap H ^
noremap L g_
noremap J 10jzz
noremap K 10kzz

" Marp
nnoremap <leader>mh :!marp % -o $(basename % .md).html<CR>
nnoremap <leader>mp :!marp % -o $(basename % .md).pdf<CR>

" Quick escape
inoremap jk <ESC>
inoremap jj <ESC>

" Edit Snippet/Template
nnoremap <silent> <leader>es :UltiSnipsEdit<CR>
nnoremap <silent> <leader>et :UltiSnipsEdit<CR>
autocmd BufNewFile * call snippet#InsertSkeleton()
let g:UltiSnipsEditSplit="vertical"

" Quick pane resize
map <silent> <A-Left> <C-w><
map <silent> <A-Right> <C-w>>
map <silent> <A-Down> <C-W>-
map <silent> <A-Up> <C-W>+

" fzf mapping
nmap <Leader>t :Tags<CR>
nmap <Leader>f :Files<CR>
nmap <Leader>bs :Buffers<CR>

" AutoFormatting
noremap <leader>af :Autoformat<CR>

" easymove
map  / <Plug>(easymotion-sn)
nmap s <Plug>(easymotion-s2)

" Align blocks and keep them selected
vmap < <gv
vmap > >gv

" Delete without copying to register
map <Leader>d "_dd
vmap <Leader>d "_dd
map <Leader>y "+yy
vmap <Leader>y "+Y

set background=dark

" Vim Indent
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
let g:indent_guides_auto_colors=0
hi IndentGuidesEven ctermbg=238
hi IndentGuidesOdd ctermbg=236

" NERDTree
let g:NERDTreeShowHidden = 1
let g:NERDTreeAutoDeleteBuffer = 1
if has('nvim')
  let g:WebDevIconsNerdTreeBeforeGlyphPadding = ""
  let g:WebDevIconsUnicodeDecorateFolderNodes = v:true
  let g:NERDTreeDirArrowExpandable = "\u00a0"
  let g:NERDTreeDirArrowCollapsible = "\u00a0"
endif
" Always open NERDTree
"autocmd vimenter * NERDTree
" Open NERDTree when starting vim with no cmd line args
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" Open NERDTree when opening a folder
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
" Close automatically vim if the only remaining window is NERDTree
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Bind NERDTreeToogle to Space
nnoremap <silent> <Space> :NERDTreeToggle<CR>

" NERDTree File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
  exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
  exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('yaml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('sh', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('fish', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('pp', 'Magenta', 'none', '#ff00ff', '#151515')

" NERDCommenter
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'


" fzf
set rtp+=~/.fzf

" vim ack
let g:ackprg = 'rg --vimgrep --no-heading'

" ripgrep
if executable('rg')
  set grepprg=rg\ --vimgrep
  command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
endif

" Deoplete.
let g:deoplete#enable_at_startup = 1
" let g:deoplete#disable_auto_complete = 1
" inoremap <expr> <C-n>  deoplete#mappings#manual_complete()

" ALE
let g:ale_sign_warning = '▲'
let g:ale_sign_error = '✗'
let g:ale_echo_msg_warning_str = '▲'
let g:ale_echo_msg_error_str = '✗'
let g:ale_echo_msg_format = '%severity% %s% [%linter%% code%]'


" Ultisnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/UltiSnips']

" Airline
set laststatus=2
set showtabline=2
let g:airline_powerline_fonts = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#ale#enabled = 1
let g:airline_theme='onedark'

" git blame
nnoremap <Leader>gb :call gitblame#echo()<CR>

" for ctrlspace
let g:airline_exclude_preview = 1

" vim-go
if has('nvim')
  let g:go_highlight_functions = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_fields = 1
  let g:go_highlight_structs = 1
  let g:go_highlight_interfaces = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_build_constraints = 1
  let g:go_fmt_command = "goimports"
  let g:go_list_type = "quickfix"
endif

" python jedi
let g:jedi#goto_command = "<leader>d"
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = ""
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>u"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>m"

" GPG no undo,backup or swapfile
if has("autocmd")
  if has("persistent_undo")
    autocmd BufNewFile,BufRead *.gpg set noundofile
  endif
  autocmd BufNewFile,BufRead *.gpg set nobackup
  autocmd BufNewFile,BufRead *.gpg set noswapfile
endif
