set shell=/bin/bash
set nocompatible              " be iMproved, required

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'KeitaNakamura/neodark.vim'
Plug 'w0rp/ale'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'godlygeek/tabular'
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }
Plug 'tpope/vim-fugitive'
Plug 'rodjek/vim-puppet'
Plug 'honza/vim-snippets'
Plug 'jamessan/vim-gnupg'
Plug 'zivyangll/git-blame.vim'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'junegunn/fzf.vim'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'mileszs/ack.vim'
Plug 'dag/vim-fish'
if has('nvim')
  Plug 'vim-airline/vim-airline'
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  Plug 'fatih/vim-go'
else
  Plug 'itchyny/lightline.vim'
endif
Plug 'edkolev/tmuxline.vim'
call plug#end()

" For any plugins that use this, make their keymappings use comma
let mapleader = ","
let maplocalleader = ","

colorscheme neodark

set tabstop=2 shiftwidth=2 expandtab smarttab
" Make it easier to work with buffers
" http://vim.wikia.com/wiki/Easier_buffer_switching
set hidden
set confirm
set autowriteall
set wildmenu wildmode=full
set backspace=2

" 
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//

" Create temporary folders if they don't already exist
if !isdirectory( expand( &undodir ) )
  call mkdir( expand( &undodir ), "p" )
endif
if !isdirectory( expand( &backupdir ) )
  call mkdir( expand( &backupdir ), "p" )
endif
if !isdirectory( expand( &directory ) )
  call mkdir( expand( &directory ), "p" )
endif

set ignorecase
set smartcase

" Shortcut to edit THIS configuration file: (e)dit (c)onfiguration
nnoremap <silent> <leader>ec :e $MYVIMRC<CR>

" Shortcut to source (reload) THIS configuration file after editing it: (s)ource (c)onfiguraiton
nnoremap <silent> <leader>sc :source $MYVIMRC<CR>

" Toggle line numbers
nnoremap <leader>n :setlocal number!<cr>

" Remap Ctrl-PageUp & Ctrl-PageDown for tmux compatibility
nnoremap [6;5~ :bnext<CR>
nnoremap [1;6B :bnext<CR>
nnoremap [5;5~ :bprev<CR>
nnoremap [1;6A :bprev<CR>
nnoremap <C-l> :bn<CR>
nnoremap <C-h> :bp<CR>

" vim ack
let g:ackprg = 'ag --vimgrep'

" Vim Indent
set background=dark
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
let g:indent_guides_auto_colors=0
hi IndentGuidesEven ctermbg=238
hi IndentGuidesOdd ctermbg=236

" NERDTree
let g:NERDTreeShowHidden=1
let g:NERDTreeAutoDeleteBuffer = 1
" Always open NERDTree
"autocmd vimenter * NERDTree
" Open NERDTree when starting vim with no cmd line args
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" Open NERDTree when opening a folder
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
" Close automatically vim if the only remaining window is NERDTree
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Bind NERDTreeToogle to Space
nnoremap <silent> <Space> :NERDTreeToggle<CR>

" NERDTree File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
  exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
  exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('yaml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('sh', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('fish', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('pp', 'Magenta', 'none', '#ff00ff', '#151515')

" fzf
set rtp+=~/.fzf
nmap <Leader>t :Tags<CR>
nmap <Leader>f :Files<CR>
nmap <Leader>b :Buffers<CR>

" Use deoplete.
let g:deoplete#enable_at_startup = 1
" let g:deoplete#disable_auto_complete = 1
" inoremap <expr> <C-n>  deoplete#mappings#manual_complete()

" ALE
let g:ale_sign_warning = 'â–²'
let g:ale_sign_error = 'âœ—'

"airline
set laststatus=2
let g:airline#extensions#syntastic#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1

"git blame
nnoremap <C-b> :call gitblame#echo()<CR>

" for ctrlspace
let g:airline_exclude_preview = 1

"vim-go
if has('nvim')
  let g:go_highlight_functions = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_fields = 1
  let g:go_highlight_structs = 1
  let g:go_highlight_interfaces = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_build_constraints = 1
  let g:go_fmt_command = "goimports"
  "let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
  "let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
  let g:go_list_type = "quickfix"
endif

" GPG no undo,backup or swapfile
if has("autocmd")
  if has("persistent_undo")
    autocmd BufNewFile,BufRead *.gpg set noundofile
  endif
  autocmd BufNewFile,BufRead *.gpg set nobackup
  autocmd BufNewFile,BufRead *.gpg set noswapfile
endif
